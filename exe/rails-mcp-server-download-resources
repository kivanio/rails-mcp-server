#!/usr/bin/env ruby

require "optparse"
require_relative "../lib/rails-mcp-server/config"
require_relative "../lib/rails-mcp-server/helpers/resource_downloader"

# Main execution
options = {
  force: false,
  verbose: false
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: rails-mcp-server-download-resources [options] RESOURCE_NAME"
  opts.separator ""
  opts.separator "Downloads documentation resources for Rails MCP Server"
  opts.separator ""
  opts.separator "Available resources: rails, stimulus, turbo"
  opts.separator ""

  opts.on("-f", "--force", "Force download even if files haven't changed") do
    options[:force] = true
  end

  opts.on("-v", "--verbose", "Verbose output") do
    options[:verbose] = true
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end

parser.parse!

if ARGV.empty?
  puts parser
  puts "\nAvailable resources:"

  # Get config directory to check available resources
  config = RailsMcpServer::Config.new
  available_resources = RailsMcpServer::ResourceDownloader.available_resources(config.config_dir)

  if available_resources.any?
    available_resources.each do |resource|
      puts "  - #{resource}"
    end
  else
    puts "  No resources configured"
  end

  exit 1
end

resource_name = ARGV[0]

begin
  # Initialize config to get the config directory
  config = RailsMcpServer::Config.new

  # Create and run downloader
  downloader = RailsMcpServer::ResourceDownloader.new(
    resource_name,
    config_dir: config.config_dir,
    force: options[:force],
    verbose: options[:verbose]
  )

  results = downloader.download

  # Display summary
  puts "\nDownload Summary:"
  puts "  Downloaded: #{results[:downloaded]}"
  puts "  Skipped: #{results[:skipped]}"
  puts "  Failed: #{results[:failed]}"

  exit_code = (results[:failed] > 0) ? 1 : 0
  exit exit_code
rescue RailsMcpServer::ResourceDownloader::DownloadError => e
  puts "Error: #{e.message}"
  exit 1
rescue => e
  puts "Unexpected error: #{e.message}"
  puts e.backtrace if options[:verbose]
  exit 1
end
