#!/usr/bin/env ruby

require "optparse"
require_relative "../lib/rails-mcp-server/config"
require_relative "../lib/rails-mcp-server/helpers/resource_downloader"
require_relative "../lib/rails-mcp-server/helpers/resource_importer"

def show_help(parser, config_dir)
  puts parser
  puts "\nAvailable resources:"

  available = RailsMcpServer::ResourceDownloader.available_resources(config_dir)
  if available.any?
    available.each { |resource| puts "  - #{resource}" }
  else
    puts "  No resources configured"
  end

  puts "\nOr use --file to import custom markdown files"
end

def print_summary(action, results)
  puts "\n#{action} Summary:"
  if action == "Import"
    puts "  Imported: #{results[:imported]}"
  else
    puts "  Downloaded: #{results[:downloaded]}"
  end
  puts "  Skipped: #{results[:skipped]}"
  puts "  Failed: #{results[:failed]}"
end

options = {
  force: false,
  verbose: false,
  file: nil
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: rails-mcp-server-download-resources [options] RESOURCE_NAME"
  opts.separator ""
  opts.separator "Downloads documentation resources for Rails MCP Server"
  opts.separator ""

  opts.on("-f", "--force", "Force download/import even if files haven't changed") do
    options[:force] = true
  end

  opts.on("-v", "--verbose", "Verbose output") do
    options[:verbose] = true
  end

  opts.on("--file PATH", "Import custom markdown file(s) from PATH") do |path|
    options[:file] = path
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    puts ""
    puts "Examples:"
    puts "  rails-mcp-server-download-resources rails"
    puts "  rails-mcp-server-download-resources --file /path/to/guide.md"
    puts "  rails-mcp-server-download-resources --file /path/to/guides/"
    puts "  rails-mcp-server-download-resources --verbose --force stimulus"
    exit
  end
end

parser.parse!

begin
  # Get config directory without requiring Rails projects
  config_dir = File.expand_path("~/.config/rails-mcp")

  # Handle file import
  if options[:file]
    unless File.exist?(options[:file])
      puts "Error: File or directory not found: #{options[:file]}"
      exit 1
    end

    importer = RailsMcpServer::ResourceImporter.new(
      "custom",
      config_dir: config_dir,
      source_path: options[:file],
      force: options[:force],
      verbose: options[:verbose]
    )

    results = importer.import
    print_summary("Import", results)
    exit (results[:failed] > 0) ? 1 : 0
  end

  # Handle resource download
  if ARGV.empty?
    show_help(parser, config_dir)
    exit 1
  end

  resource_name = ARGV[0]
  downloader = RailsMcpServer::ResourceDownloader.new(
    resource_name,
    config_dir: config_dir,
    force: options[:force],
    verbose: options[:verbose]
  )

  results = downloader.download
  print_summary("Download", results)
  exit (results[:failed] > 0) ? 1 : 0
rescue RailsMcpServer::ResourceDownloader::DownloadError,
  RailsMcpServer::ResourceImporter::ImportError => e
  puts "Error: #{e.message}"
  exit 1
rescue => e
  puts "Unexpected error: #{e.message}"
  puts e.backtrace if options[:verbose]
  exit 1
end
