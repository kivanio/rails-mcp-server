#!/usr/bin/env ruby

if defined?(Bundler) && !defined?(Bundler::ORIGINAL_ENV)
  require "bundler/setup"
  Bundler::ORIGINAL_ENV = ENV.to_h
end

require "fast_mcp"
require "rack"
require "rack/handler/puma"
require "puma"
require "puma/configuration"
require "puma/launcher"
require_relative "../lib/rails_mcp_server"

# Debug information
puts "Extensions loaded: #{RailsMcpServer.extensions_loaded?}\n\n"

if ARGV[0] == "version"
  puts "Rails MCP Server version #{RailsMcpServer::VERSION}"
  exit 0
end

# Help message
if ARGV[0] == "--help" || ARGV[0] == "-h"
  puts "Rails MCP Server - MCP protocol server for Rails projects"
  puts ""
  puts "Usage: #{File.basename($0)} [options]"
  puts ""
  puts "Options:"
  puts "  --log-level LEVEL      Log level: debug, info, warn, error (default: info)"
  puts "  --mode MODE            Server mode: http or stdio (default: stdio)"
  puts "  -p, --port PORT        Port to listen on (default: 6029)"
  puts "  version                Display version information"
  puts "  --help, -h             Display this help message"
  puts ""
  puts "Example:"
  puts "  #{File.basename($0)} --log-level debug -p 6060"
  puts "  #{File.basename($0)} --mode stdio"
  exit 0
end

# Default values
port = 6029
mode = "stdio"

# Parse command-line arguments
i = 0
while i < ARGV.length
  case ARGV[i]
  when "--log-level"
    log_level = ARGV[i + 1].to_sym
    i += 2
  when "-p", "--port"
    port = ARGV[i + 1].to_i
    i += 2
  when "--mode"
    mode = ARGV[i + 1].downcase
    unless ["http", "stdio"].include?(mode) # rubocop:disable Performance/CollectionLiteralInLoop
      puts "Error: Invalid mode '#{mode}'. Must be 'http' or 'stdio'."
      exit 1
    end
    i += 2
  else
    i += 1
  end
end

RailsMcpServer.config do |config|
  config.log_level = log_level
end

RailsMcpServer.log(:info, "Starting Rails MCP Server in #{mode} mode...")

# Create tools configuration for both modes
def setup_mcp_tools(server)
  server.register_tools(RailsMcpServer::SwitchProject, RailsMcpServer::ProjectInfo,
    RailsMcpServer::ListFiles, RailsMcpServer::GetFile, RailsMcpServer::GetRoutes, RailsMcpServer::AnalyzeModels,
    RailsMcpServer::GetSchema, RailsMcpServer::AnalyzeControllerViews, RailsMcpServer::AnalyzeEnvironmentConfig,
    RailsMcpServer::LoadGuide)

  server.register_resources(RailsMcpServer::RailsGuidesResource, RailsMcpServer::RailsGuidesResources)
end

case mode
when "http"
  puts "Starting Rack application with MCP middleware on http://localhost:#{port}"
  puts "MCP endpoints:"
  puts "  - http://localhost:#{port}/mcp/sse (SSE endpoint)"
  puts "  - http://localhost:#{port}/mcp/messages (JSON-RPC endpoint)"
  puts ""
  puts "Version #{RailsMcpServer::VERSION}"
  puts ""

  rack_app = ->(env) {
    [200, {"Content-Type" => "text/plain"}, ["Rails MCP Server #{RailsMcpServer::VERSION}"]]
  }

  mcp_app = FastMcp.rack_middleware(
    rack_app,
    name: "rails-mcp-server", version: RailsMcpServer::VERSION,
    logger: RailsMcpServer.logger
  ) { |server| setup_mcp_tools(server) }

  app = Rack::Builder.new { run mcp_app }
  config = Puma::Configuration.new do |user_config|
    user_config.bind "tcp://localhost:#{port}"
    user_config.app app
  end

  launcher = Puma::Launcher.new(config)
  launcher.run
when "stdio"
  RailsMcpServer.log(:info, "Starting MCP server in STDIO mode...")

  server = FastMcp::Server.new(name: "rails-mcp-server", version: RailsMcpServer::VERSION)
  setup_mcp_tools(server)

  server.start
end

RailsMcpServer.log(:info, "Stopping Rails MCP Server...")
exit
